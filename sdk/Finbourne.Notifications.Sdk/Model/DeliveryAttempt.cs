/*
 * FINBOURNE Notifications API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.308
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Notifications.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Notifications.Sdk.Model
{
    /// <summary>
    /// DeliveryAttempt
    /// </summary>
    [DataContract(Name = "DeliveryAttempt")]
    public partial class DeliveryAttempt : IEquatable<DeliveryAttempt>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryAttempt" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliveryAttempt() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliveryAttempt" /> class.
        /// </summary>
        /// <param name="attemptNumber">The total number of attempts made immediately after this delivery attempt (required).</param>
        /// <param name="attemptedTime">The time that the delivery was attempted (required).</param>
        /// <param name="attemptStatus">attemptStatus (required).</param>
        public DeliveryAttempt(int attemptNumber = default(int), DateTimeOffset attemptedTime = default(DateTimeOffset), AttemptStatus attemptStatus = default(AttemptStatus))
        {
            this.AttemptNumber = attemptNumber;
            this.AttemptedTime = attemptedTime;
            // to ensure "attemptStatus" is required (not null)
            this.AttemptStatus = attemptStatus ?? throw new ArgumentNullException("attemptStatus is a required property for DeliveryAttempt and cannot be null");
        }

        /// <summary>
        /// The total number of attempts made immediately after this delivery attempt
        /// </summary>
        /// <value>The total number of attempts made immediately after this delivery attempt</value>
        [DataMember(Name = "attemptNumber", IsRequired = true, EmitDefaultValue = true)]
        public int AttemptNumber { get; set; }

        /// <summary>
        /// The time that the delivery was attempted
        /// </summary>
        /// <value>The time that the delivery was attempted</value>
        [DataMember(Name = "attemptedTime", IsRequired = true, EmitDefaultValue = false)]
        public DateTimeOffset AttemptedTime { get; set; }

        /// <summary>
        /// Gets or Sets AttemptStatus
        /// </summary>
        [DataMember(Name = "attemptStatus", IsRequired = true, EmitDefaultValue = false)]
        public AttemptStatus AttemptStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeliveryAttempt {\n");
            sb.Append("  AttemptNumber: ").Append(AttemptNumber).Append("\n");
            sb.Append("  AttemptedTime: ").Append(AttemptedTime).Append("\n");
            sb.Append("  AttemptStatus: ").Append(AttemptStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DeliveryAttempt);
        }

        /// <summary>
        /// Returns true if DeliveryAttempt instances are equal
        /// </summary>
        /// <param name="input">Instance of DeliveryAttempt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeliveryAttempt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AttemptNumber == input.AttemptNumber ||
                    this.AttemptNumber.Equals(input.AttemptNumber)
                ) && 
                (
                    this.AttemptedTime == input.AttemptedTime ||
                    (this.AttemptedTime != null &&
                    this.AttemptedTime.Equals(input.AttemptedTime))
                ) && 
                (
                    this.AttemptStatus == input.AttemptStatus ||
                    (this.AttemptStatus != null &&
                    this.AttemptStatus.Equals(input.AttemptStatus))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.AttemptNumber.GetHashCode();
                if (this.AttemptedTime != null)
                    hashCode = hashCode * 59 + this.AttemptedTime.GetHashCode();
                if (this.AttemptStatus != null)
                    hashCode = hashCode * 59 + this.AttemptStatus.GetHashCode();
                return hashCode;
            }
        }

    }
}
