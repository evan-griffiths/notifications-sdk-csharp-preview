/*
 * FINBOURNE Notifications API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.299
 * Contact: info@finbourne.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Finbourne.Notifications.Sdk.Client.OpenAPIDateConverter;

namespace Finbourne.Notifications.Sdk.Model
{
    /// <summary>
    /// UndeliveredMessage
    /// </summary>
    [DataContract(Name = "UndeliveredMessage")]
    public partial class UndeliveredMessage : IEquatable<UndeliveredMessage>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UndeliveredMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected UndeliveredMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="UndeliveredMessage" /> class.
        /// </summary>
        /// <param name="deliveryId">The identifier of the delivery message (required).</param>
        /// <param name="eventId">The identifier of the event generated by Notifications Service (required).</param>
        /// <param name="subscriptionIdentifier">subscriptionIdentifier (required).</param>
        /// <param name="notificationId">The identifier of the notification (required).</param>
        /// <param name="deliveryChannel">The delivery channel of the message (required).</param>
        /// <param name="messageDetails">The Details of the delivery message as JSON string (required).</param>
        /// <param name="deliveryAttempts">A list of all the delivery attempts made for this message (required).</param>
        public UndeliveredMessage(Guid deliveryId = default(Guid), Guid eventId = default(Guid), ResourceId subscriptionIdentifier = default(ResourceId), Guid notificationId = default(Guid), string deliveryChannel = default(string), string messageDetails = default(string), List<DeliveryAttempt> deliveryAttempts = default(List<DeliveryAttempt>))
        {
            this.DeliveryId = deliveryId;
            this.EventId = eventId;
            // to ensure "subscriptionIdentifier" is required (not null)
            this.SubscriptionIdentifier = subscriptionIdentifier ?? throw new ArgumentNullException("subscriptionIdentifier is a required property for UndeliveredMessage and cannot be null");
            this.NotificationId = notificationId;
            // to ensure "deliveryChannel" is required (not null)
            this.DeliveryChannel = deliveryChannel ?? throw new ArgumentNullException("deliveryChannel is a required property for UndeliveredMessage and cannot be null");
            // to ensure "messageDetails" is required (not null)
            this.MessageDetails = messageDetails ?? throw new ArgumentNullException("messageDetails is a required property for UndeliveredMessage and cannot be null");
            // to ensure "deliveryAttempts" is required (not null)
            this.DeliveryAttempts = deliveryAttempts ?? throw new ArgumentNullException("deliveryAttempts is a required property for UndeliveredMessage and cannot be null");
        }

        /// <summary>
        /// The identifier of the delivery message
        /// </summary>
        /// <value>The identifier of the delivery message</value>
        [DataMember(Name = "deliveryId", IsRequired = true, EmitDefaultValue = false)]
        public Guid DeliveryId { get; set; }

        /// <summary>
        /// The identifier of the event generated by Notifications Service
        /// </summary>
        /// <value>The identifier of the event generated by Notifications Service</value>
        [DataMember(Name = "eventId", IsRequired = true, EmitDefaultValue = false)]
        public Guid EventId { get; set; }

        /// <summary>
        /// Gets or Sets SubscriptionIdentifier
        /// </summary>
        [DataMember(Name = "subscriptionIdentifier", IsRequired = true, EmitDefaultValue = false)]
        public ResourceId SubscriptionIdentifier { get; set; }

        /// <summary>
        /// The identifier of the notification
        /// </summary>
        /// <value>The identifier of the notification</value>
        [DataMember(Name = "notificationId", IsRequired = true, EmitDefaultValue = false)]
        public Guid NotificationId { get; set; }

        /// <summary>
        /// The delivery channel of the message
        /// </summary>
        /// <value>The delivery channel of the message</value>
        [DataMember(Name = "deliveryChannel", IsRequired = true, EmitDefaultValue = false)]
        public string DeliveryChannel { get; set; }

        /// <summary>
        /// The Details of the delivery message as JSON string
        /// </summary>
        /// <value>The Details of the delivery message as JSON string</value>
        [DataMember(Name = "messageDetails", IsRequired = true, EmitDefaultValue = false)]
        public string MessageDetails { get; set; }

        /// <summary>
        /// A list of all the delivery attempts made for this message
        /// </summary>
        /// <value>A list of all the delivery attempts made for this message</value>
        [DataMember(Name = "deliveryAttempts", IsRequired = true, EmitDefaultValue = false)]
        public List<DeliveryAttempt> DeliveryAttempts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UndeliveredMessage {\n");
            sb.Append("  DeliveryId: ").Append(DeliveryId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  SubscriptionIdentifier: ").Append(SubscriptionIdentifier).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  DeliveryChannel: ").Append(DeliveryChannel).Append("\n");
            sb.Append("  MessageDetails: ").Append(MessageDetails).Append("\n");
            sb.Append("  DeliveryAttempts: ").Append(DeliveryAttempts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UndeliveredMessage);
        }

        /// <summary>
        /// Returns true if UndeliveredMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of UndeliveredMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UndeliveredMessage input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryId == input.DeliveryId ||
                    (this.DeliveryId != null &&
                    this.DeliveryId.Equals(input.DeliveryId))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.SubscriptionIdentifier == input.SubscriptionIdentifier ||
                    (this.SubscriptionIdentifier != null &&
                    this.SubscriptionIdentifier.Equals(input.SubscriptionIdentifier))
                ) && 
                (
                    this.NotificationId == input.NotificationId ||
                    (this.NotificationId != null &&
                    this.NotificationId.Equals(input.NotificationId))
                ) && 
                (
                    this.DeliveryChannel == input.DeliveryChannel ||
                    (this.DeliveryChannel != null &&
                    this.DeliveryChannel.Equals(input.DeliveryChannel))
                ) && 
                (
                    this.MessageDetails == input.MessageDetails ||
                    (this.MessageDetails != null &&
                    this.MessageDetails.Equals(input.MessageDetails))
                ) && 
                (
                    this.DeliveryAttempts == input.DeliveryAttempts ||
                    this.DeliveryAttempts != null &&
                    input.DeliveryAttempts != null &&
                    this.DeliveryAttempts.SequenceEqual(input.DeliveryAttempts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryId != null)
                    hashCode = hashCode * 59 + this.DeliveryId.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.SubscriptionIdentifier != null)
                    hashCode = hashCode * 59 + this.SubscriptionIdentifier.GetHashCode();
                if (this.NotificationId != null)
                    hashCode = hashCode * 59 + this.NotificationId.GetHashCode();
                if (this.DeliveryChannel != null)
                    hashCode = hashCode * 59 + this.DeliveryChannel.GetHashCode();
                if (this.MessageDetails != null)
                    hashCode = hashCode * 59 + this.MessageDetails.GetHashCode();
                if (this.DeliveryAttempts != null)
                    hashCode = hashCode * 59 + this.DeliveryAttempts.GetHashCode();
                return hashCode;
            }
        }

    }
}
